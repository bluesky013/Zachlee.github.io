<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Zach的博客</title>
    <link>https://www.bluesky013.cn/post/</link>
    <description>Recent content in Posts on Zach的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 03 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.bluesky013.cn/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>FrameGraph(一)</title>
      <link>https://www.bluesky013.cn/post/skyengine-framegraph01/</link>
      <pubDate>Sun, 03 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.bluesky013.cn/post/skyengine-framegraph01/</guid>
      <description>FrameGraph 概念来来源于寒霜，个人理解本质一种面向数据编程模式，利用单帧全局信息进行资源和 Task(Pass) 的调度优化。
主要解决问题：
管线扩展性 资源自动配置管理 异步计算管线管理 其中扩展性需要以每帧构建的开销为代价。资源的配置管理分为两部分，一是内存的生命周期管理、内存复用，二是资源的动态 Barrier 处理。
异步管线（个人理解还不太完善后续补充），后续分几篇介绍 SkyEngine FrameGraph。
扩展性问题 SkyEngine的希望做成可定制化的专用引擎，因此希望做到模块化。对于引擎模块化来说，需要解决如何在各模块动态定制管线的问题。目前想法是依赖 project 的配置来实现，两种方法，一管线资产化，二管线脚本化，渲染核心无固定的管线结构。
资源管理问题 现代游戏动辄300+ pass，在 GPU 资源有限的情况下必须要尽可能复用内存，存在两种做法
对象池管理，复用 Image\Buffer 对象 优点：相对简单、兼容性好 缺点：格式、大小等限制 内存池管理，Image\Buffer 对象复用 Memory 优点：限制小、复用率高 缺点：依赖现代 API，相对复杂的内存管理 为实现内存池管理，依赖的如 Vulkan API 下 Buffer\Image 对象绑定 Memory 对象的操作，这边有一个假设前提，节约显存带来的收益大于额外的构建开销或者额外的构建开销可忽略不计。
额外的构建开销包括 ImageView\FrameBuffer 的构建，受限于本人对驱动的了解，这部分可能要留作后续研究、试验确定，个人浅显的理解 View\FrameBuffer 仅为描述资源\容器，构建开销并不应该很大。</description>
    </item>
    
    <item>
      <title>Framework-Event</title>
      <link>https://www.bluesky013.cn/post/skyengine-framework-event/</link>
      <pubDate>Sat, 02 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.bluesky013.cn/post/skyengine-framework-event/</guid>
      <description>Event 引擎存在大量的监听事件，典型的比如：
系统Tick事件、初始化、销毁等事件 窗口事件 为此可能存在大量分散的 Listener 处理、维护，因此设计了一个统一的 Event 系统来统一处理。
基础功能包括：
Event 对象通过模板 + Interface 方式确定一个单例对象 Event 支持 Listener 针对某一个类型 Key 进行过滤 Event 支持对 Listener 进行广播 使用形式
// Interface class EventInterface : public EventTraits { virtual void OnEvent0(float v) = 0; virtual void OnEvent1() = 0; }; // Listener class Object : public EventInterface { public: Object() { Event&amp;lt;EventInterface&amp;gt;::Connect(this); } ~Object() { Event&amp;lt;EventInterface&amp;gt;::DisConnect(this); } void OnEvent0(float v) { /* todo */ } void OnEvent1() { /* todo */ } }; // Dispatcher { // Event0 Event&amp;lt;ITestEvent1&amp;gt;::BroadCast(&amp;amp;EventInterface::OnEvent0, 1.</description>
    </item>
    
    <item>
      <title>Gpu Driven Scene</title>
      <link>https://www.bluesky013.cn/post/skyengine-gpu-driven-scene/</link>
      <pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.bluesky013.cn/post/skyengine-gpu-driven-scene/</guid>
      <description>GPU Driven </description>
    </item>
    
    <item>
      <title>Render Mesh</title>
      <link>https://www.bluesky013.cn/post/skyengine-mesh/</link>
      <pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.bluesky013.cn/post/skyengine-mesh/</guid>
      <description>Mesh </description>
    </item>
    
    <item>
      <title>SkyEngine 介绍</title>
      <link>https://www.bluesky013.cn/post/skyengine/</link>
      <pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.bluesky013.cn/post/skyengine/</guid>
      <description>SkyEngine 初衷 SkyEngine 是业余时间写的一款渲染引擎，初衷是为了学习、验证等目的。本系列也是主要介绍引擎开发过程中的一部分思路和想法。
主要思路：
逻辑层采用 ECS + JobSystem 设计思路 渲染器采用 FrameGraph + 组件化的整体思路。 关于Editorgit 引用 QT5 的 Native Editor，逐步开发中。
关于后端 引擎采用单 vulkan 后端的设计，主要考虑以下几个原因：
Vulkan 目前跨平台（包括 MacOS\IOS 平台受益于 MoltenVK）有较好的兼容性。 避免 RHI 设计时对某一个 API 妥协。 【懒】。 功能 framework 反射 序列号\反序列化 AssetManager JobSystem Script Lua JavaScript Launcher \ Application \ NativeWindow Windows MacOS engine Dynamic Modules World \ Level ECS render FrameGraph 基础渲染 driver vulkan Windows MacOS Tools Editor AssetBuilder FBX / GLTF / &amp;hellip; Shader 三方库 assimp glm crc32c rapidjson taskflow stb-image imgui SFMT SPIRV_Cross SPIRV_Headers SPIRV_Tools glslang shaderc </description>
    </item>
    
  </channel>
</rss>
